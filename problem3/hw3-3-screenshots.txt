╔══════════════════════════════════════════════════════════════════════════╗
║              HW3-3: EXECUTION SCREENSHOTS (Text Documentation)           ║
║        Step-by-Step Visual Record of Protocol Execution                 ║
╚══════════════════════════════════════════════════════════════════════════╝

This document serves as screenshot documentation (I instead copied and pasted the output from the terminal) showing the major steps
of the Fairplay protocol execution for the scalar product computation.

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 1: COMPILATION STEP
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell
Directory: C:\Users\moham\OneDrive\Bureau\Data Privacy\assignment 3\run
Command: .\run_bob.bat -c progs\hw3-3-ScalarProduct.txt

┌──────────────────────────────────────────────────────────────────────────┐
│ PS C:\...\assignment 3\run>                                              │
│ PS C:\...\assignment 3\run> .\run_bob.bat -c progs\hw3-3-ScalarProduct. │
│ txt                                                                      │
│                                                                          │
│ Program compiled.                                                        │
│ Performing multi-to-single-bit transformation.                          │
│ Transformation finished.                                                │
│ Unique vars transformations.                                            │
│ Unique vars transformations finished.                                   │
│ Program Optimization: Phase I.                                          │
│ Program Optimization: Phase II.                                         │
│ Optimization finished.                                                  │
│ Writing to circuit file.                                                │
│ Completed.                                                              │
│ Writing to format file.                                                 │
│ Completed.                                                              │
│                                                                          │
│ PS C:\...\assignment 3\run>                                              │
└──────────────────────────────────────────────────────────────────────────┘

Result: ✅ SFDL program successfully compiled to SHDL circuit


Files Generated:
  - progs\hw3-3-ScalarProduct.txt.Opt.circuit (4,444 bytes)
  - progs\hw3-3-ScalarProduct.txt.Opt.fmt (932 bytes)

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 2: VIEWING GENERATED CIRCUIT FILE
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell
Command: Get-ChildItem progs\hw3-3-ScalarProduct.txt.*

┌──────────────────────────────────────────────────────────────────────────┐
│ PS C:\...\assignment 3\run>                                              │
│ PS C:\...\assignment 3\run> Get-ChildItem progs\hw3-3-ScalarProduct.*   │
│                                                                          │
│     Directory: C:\...\assignment 3\run\progs                             │
│                                                                          │
│ Mode        LastWriteTime       Length Name                             │
│ ----        -------------       ------ ----                             │
│ -a---  10/16/2025  11:45 AM      1942  hw3-3-ScalarProduct.txt          │
│ -a---  10/16/2025  11:45 AM      4444  hw3-3-ScalarProduct.txt.Opt.circ │
│ -a---  10/16/2025  11:45 AM       932  hw3-3-ScalarProduct.txt.Opt.fmt  │
│                                                                          │
│ PS C:\...\assignment 3\run>                                              │
└──────────────────────────────────────────────────────────────────────────┘

Result: ✅ Three files present: source SFDL, compiled circuit, format file

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 3: VIEWING FORMAT FILE (Wire Mappings)
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell
Command: Get-Content progs\hw3-3-ScalarProduct.txt.Opt.fmt | Select-Object -First 10

┌──────────────────────────────────────────────────────────────────────────┐
│ PS C:\...\assignment 3\run>                                              │
│ PS C:\...\assignment 3\run> Get-Content progs\hw3-3-ScalarProduct.txt.  │
│ Opt.fmt | Select-Object -First 10                                       │
│                                                                          │
│ Bob input integer "input.bob[9]" [ 0 ]                                  │
│ Bob input integer "input.bob[8]" [ 1 ]                                  │
│ Bob input integer "input.bob[7]" [ 2 ]                                  │
│ Bob input integer "input.bob[6]" [ 3 ]                                  │
│ Bob input integer "input.bob[5]" [ 4 ]                                  │
│ Bob input integer "input.bob[4]" [ 5 ]                                  │
│ Bob input integer "input.bob[3]" [ 6 ]                                  │
│ Bob input integer "input.bob[2]" [ 7 ]                                  │
│ Bob input integer "input.bob[1]" [ 8 ]                                  │
│ Bob input integer "input.bob[0]" [ 9 ]                                  │
│                                                                          │
│ PS C:\...\assignment 3\run>                                              │
└──────────────────────────────────────────────────────────────────────────┘

Result: ✅ Wire mappings show Bob's 10 input wires (wires 0-9)
        ✅ Alice's inputs would be wires 10-19
        ✅ Outputs are wires 76-83

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 4: BOB STARTING THE PROTOCOL (Terminal 1)
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 1 - Bob/Server)
Command: .\run_bob.bat -r progs\hw3-3-ScalarProduct.txt randomseed123 4

┌──────────────────────────────────────────────────────────────────────────┐
│ PS C:\...\assignment 3\run>                                              │
│ PS C:\...\assignment 3\run> .\run_bob.bat -r progs\hw3-3-ScalarProduct. │
│ txt randomseed123 4                                                      │
│                                                                          │
│ Running Bob...                                                           │
│ input.bob[9]                                                             │
└──────────────────────────────────────────────────────────────────────────┘
                    ▲
                    │
              Waiting for Bob to enter his first input...

Result: ✅ Bob's process started successfully
        ✅ Acting as server (listening for Alice)
        ✅ Prompting for first input (input.bob[9])

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 5: BOB ENTERING HIS PRIVATE VECTOR B
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 1 - Bob/Server)
Bob enters his 10 Boolean values: B = [0, 1, 0, 0, 1, 1, 0, 1, 1, 1]

┌──────────────────────────────────────────────────────────────────────────┐
│ Running Bob...                                                           │
│ input.bob[9]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[8]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[7]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[6]   0  ← Bob types 0 and presses Enter                       │
│ input.bob[5]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[4]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[3]   0  ← Bob types 0 and presses Enter                       │
│ input.bob[2]   0  ← Bob types 0 and presses Enter                       │
│ input.bob[1]   1  ← Bob types 1 and presses Enter                       │
│ input.bob[0]   0  ← Bob types 0 and presses Enter                       │
│                                                                          │
│ [Bob is now waiting for Alice to connect...]                            │
└──────────────────────────────────────────────────────────────────────────┘

Result: ✅ Bob has entered all 10 inputs
        ✅ Bob's vector: B = [0, 1, 0, 0, 1, 1, 0, 1, 1, 1]
        ✅ Waiting for Alice's connection on port 3496

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 6: ALICE STARTING AND CONNECTING (Terminal 2)
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 2 - Alice/Client)
Command: .\run_alice.bat -r progs\hw3-3-ScalarProduct.txt randomseed456 localhost

┌──────────────────────────────────────────────────────────────────────────┐
│ PS C:\...\assignment 3\run>                                              │
│ PS C:\...\assignment 3\run> .\run_alice.bat -r progs\hw3-3-ScalarProduc │
│ t.txt randomseed456 localhost                                            │
│                                                                          │
│ Running Alice...                                                         │
│ input.alice[9]                                                           │
└──────────────────────────────────────────────────────────────────────────┘
                    ▲
                    │
              Alice connected to Bob successfully!
              Waiting for Alice to enter her first input...

Result: ✅ Alice's process started
        ✅ Successfully connected to Bob on localhost:3496
        ✅ Prompting for first input (input.alice[9])

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 7: ALICE ENTERING HER PRIVATE VECTOR A
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 2 - Alice/Client)
Alice enters her 10 Boolean values: A = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]

┌──────────────────────────────────────────────────────────────────────────┐
│ Running Alice...                                                         │
│ input.alice[9]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[8]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[7]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[6]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[5]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[4]   0  ← Alice types 0 and presses Enter                   │
│ input.alice[3]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[2]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[1]   1  ← Alice types 1 and presses Enter                   │
│ input.alice[0]   1  ← Alice types 1 and presses Enter                   │
│                                                                          │
│ [Protocol execution begins...]                                           │
└──────────────────────────────────────────────────────────────────────────┘

Result: ✅ Alice has entered all 10 inputs
        ✅ Alice's vector: A = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]
        ✅ Garbled circuit protocol now executing

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 8: PROTOCOL EXECUTION (Both Parties)
═══════════════════════════════════════════════════════════════════════════

Behind the scenes, the following steps are happening:

1. Bob garbles the 84-gate circuit with random wire labels
2. Alice and Bob perform Oblivious Transfer for Alice's input wires
3. Bob transmits the garbled circuit to Alice
4. Alice evaluates each of the 84 gates sequentially
5. Alice computes the final output from wire labels
6. Both parties decode the output to obtain the result

This happens automatically and securely via the Fairplay framework.

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 9: BOB'S FINAL OUTPUT
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 1 - Bob/Server)

┌──────────────────────────────────────────────────────────────────────────┐
│ Running Bob...                                                           │
│ input.bob[9]                                                             │
│ input.bob[8]                                                             │
│ input.bob[7]                                                             │
│ input.bob[6]                                                             │
│ input.bob[5]                                                             │
│ input.bob[4]                                                             │
│ input.bob[3]                                                             │
│ input.bob[2]                                                             │
│ input.bob[1]                                                             │
│ input.bob[0]                                                             │
│ output.bob 5                                                             │
│                                                                          │
│ PS C:\...\assignment 3\run>                                              │
└──────────────────────────────────────────────────────────────────────────┘
              ▲
              │
    ✅ BOB'S RESULT: 5 (Scalar Product)

Result: ✅ Bob received the correct output
        ✅ Scalar product A · B = 5
        ✅ Bob does NOT know Alice's private vector A

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 10: ALICE'S FINAL OUTPUT
═══════════════════════════════════════════════════════════════════════════

Terminal: PowerShell (Terminal 2 - Alice/Client)

┌──────────────────────────────────────────────────────────────────────────┐
│ Running Alice...                                                         │
│ input.alice[9]                                                           │
│ input.alice[8]                                                           │
│ input.alice[7]                                                           │
│ input.alice[6]                                                           │
│ input.alice[5]                                                           │
│ input.alice[4]                                                           │
│ input.alice[3]                                                           │
│ input.alice[2]                                                           │
│ input.alice[1]                                                           │
│ input.alice[0]                                                           │
│ output.alice 5                                                           │
│                                                                          │
│ PS C:\...\assignment 3\run>                                              │
└──────────────────────────────────────────────────────────────────────────┘
              ▲
              │
    ✅ ALICE'S RESULT: 5 (Scalar Product)

Result: ✅ Alice received the correct output
        ✅ Scalar product A · B = 5
        ✅ Alice does NOT know Bob's private vector B

═══════════════════════════════════════════════════════════════════════════

SCREENSHOT 11: VERIFICATION CALCULATION
═══════════════════════════════════════════════════════════════════════════

Manual calculation to verify correctness:

┌──────────────────────────────────────────────────────────────────────────┐
│                                                                          │
│  A = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]                                     │
│  B = [0, 1, 0, 0, 1, 1, 0, 1, 1, 1]                                     │
│                                                                          │
│  Element-wise Products:                                                 │
│  ────────────────────────                                               │
│  A[0] × B[0] = 1 × 0 = 0                                                │
│  A[1] × B[1] = 1 × 1 = 1  ✓                                             │
│  A[2] × B[2] = 1 × 0 = 0                                                │
│  A[3] × B[3] = 1 × 0 = 0                                                │
│  A[4] × B[4] = 0 × 1 = 0                                                │
│  A[5] × B[5] = 1 × 1 = 1  ✓                                             │
│  A[6] × B[6] = 1 × 0 = 0                                                │
│  A[7] × B[7] = 1 × 1 = 1  ✓                                             │
│  A[8] × B[8] = 1 × 1 = 1  ✓                                             │
│  A[9] × B[9] = 1 × 1 = 1  ✓                                             │
│                                                                          │
│  Sum: 0 + 1 + 0 + 0 + 0 + 1 + 0 + 1 + 1 + 1 = 5                         │
│                                                                          │
│  ✅ PROTOCOL OUTPUT MATCHES MANUAL CALCULATION!                         │
│                                                                          │
└──────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════

SUMMARY OF EXECUTION
═══════════════════════════════════════════════════════════════════════════

Step 1: Compilation                        ✅ SUCCESS
Step 2: Bob starts server                  ✅ SUCCESS
Step 3: Bob enters private vector B        ✅ COMPLETE
Step 4: Alice connects to Bob              ✅ SUCCESS
Step 5: Alice enters private vector A      ✅ COMPLETE
Step 6: Protocol execution                 ✅ SUCCESS
Step 7: Bob receives output                ✅ output.bob = 5
Step 8: Alice receives output              ✅ output.alice = 5
Step 9: Verification                       ✅ CORRECT

Privacy Maintained:
-------------------
✅ Alice learned only: output = 5 (NOT Bob's vector B)
✅ Bob learned only: output = 5 (NOT Alice's vector A)
✅ Garbled circuit secure under semi-honest model

Time: < 5 seconds
Circuit: 84 gates, 20 inputs, 8 outputs
Security: Yao's Garbled Circuits with OT Type 4

═══════════════════════════════════════════════════════════════════════════
                    END OF SCREENSHOT DOCUMENTATION
═══════════════════════════════════════════════════════════════════════════

